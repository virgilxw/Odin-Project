
#Project Euler Problem 1: Multiples of 3 and 5
#Adapted from https://projecteuler.net/problem=1

#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

#Find the sum of all the multiples of 3 or 5 below 1000.

problem_one = Proc.new do
	sum = 0
	1000.times do |i|
		if i % 3 == 0
			sum += i
		elsif i % 5 == 0
			sum += i
		end
	end
	sum
end


puts ("Solution to problem one: #{problem_one.call}.")

#Project Euler Problem 2: Even Fibonacci numbers
#Adapted from https://projecteuler.net/problem=2

#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 #terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

problem_two = Proc.new do
	counter_one = 1
	counter_two = 2
	counter_three = 0
	sum = 2
	
	while counter_three < 4000000
		counter_three = counter_one + counter_two
		if counter_three % 2 == 0
			sum += counter_three
		end
		counter_one = counter_two
		counter_two = counter_three
	end
	sum
end

puts ("Solution to problem one: #{problem_two.call}.")


#Project Euler Problem 2: Largest prime factor
#Adapted from https://projecteuler.net/problem=3


#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
require 'prime'

def Problem_three(input)
	return input.prime_division.sort[-1][0]
end

puts ("Solution to problem one: #{Problem_three(600851475143)}.")